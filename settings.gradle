rootProject.name = 'atrium'

buildscript {
    gradle.ext.tutteli_plugins_version = '0.29.0'
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "ch.tutteli:tutteli-gradle-settings:$gradle.ext.tutteli_plugins_version"
    }
}

apply plugin: 'ch.tutteli.settings'

//TODO remove as soon as https://youtrack.jetbrains.com/issue/KT-29069 is fixed
def kotlinJvmJsAndAndroidIfCi = { self, String suffix ->
    if (System.getenv('CI')) {
        self.kotlinJvmJsAndroid(suffix)
    } else {
        self.kotlinJvmJs(suffix)
    }
}
def kotlinJvmAndAndroidIfCi = { self, String suffix ->
    self.folder(suffix, "$suffix-") {
        prefixed('common', 'jvm')
        if (System.getenv('CI')) {
            prefixed('android')
        }
    }
}

//noinspection GroovyAssignabilityCheck
include {



    bundles {
        kotlinJvmJsAndAndroidIfCi(delegate, 'cc-de_CH-robstoll')
        kotlinJvmJsAndAndroidIfCi(delegate, 'fluent-en_GB')
        kotlinJvmAndAndroidIfCi(delegate, 'fluent-en_GB-jdk8')
        kotlinJvmJsAndAndroidIfCi(delegate, 'cc-infix-en_GB-robstoll')

        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            //TODO add cc-de_CH-robstoll-smoke-test with 1.0.0

            folder('cc-infix-en_GB-robstoll') {
                _ 'cc-infix-en_GB-robstoll-smoke-test'
            }
            folder('fluent-en_GB') {
                _ 'fluent-en_GB-smoke-test'
            }
            folder('fluent-en_GB-jdk8') {
                _ 'fluent-en_GB-jdk8-smoke-test'
            }

            //TODO remove with 1.0.0
            folder('cc-en_GB-robstoll') {
                _ 'cc-en_GB-robstoll-smoke-test'
            }
        }
    }

    apis('api-') {
        kotlinJvmJsAndAndroidIfCi(delegate, 'cc-de_CH')
        kotlinJvmJsAndAndroidIfCi(delegate, 'fluent-en_GB')
        folder('fluent-en_GB', 'fluent-en_GB-') {
            extensions {
                kotlinJvmAndAndroidIfCi(delegate, 'jdk8')
            }
        }
        kotlinJvmJsAndAndroidIfCi(delegate, 'cc-infix-en_GB')
    }

    domain('domain-') {
        kotlinJvmJsAndAndroidIfCi(delegate, 'api')
        kotlinJvmJsAndAndroidIfCi(delegate, 'builders')
        kotlinJvmJsAndAndroidIfCi(delegate, 'robstoll')
        kotlinJvmJsAndAndroidIfCi(delegate, 'robstoll-lib')
    }

    core('core-') {
        kotlinJvmJsAndAndroidIfCi(delegate, 'api')
        kotlinJvmJsAndAndroidIfCi(delegate, 'robstoll')
        kotlinJvmJsAndAndroidIfCi(delegate, 'robstoll-lib')
    }

    translations('translations-') {
        kotlinJvmJsAndAndroidIfCi(delegate, 'de_CH')
        kotlinJvmJsAndAndroidIfCi(delegate, 'en_GB')
    }

    misc {
        _ 'bc-test'
        _ 'spec'
        kotlinJvmJsAndAndroidIfCi(delegate, 'specs')
        kotlinJvmJsAndAndroidIfCi(delegate, 'verbs')
        kotlinJvmJsAndAndroidIfCi(delegate, 'verbs-internal')
    }

    samples {
        js {
            project('mocha')
        }
        project('readme-examples')
    }


    //TODO remove all below with 1.0.0
    bundles {
        _ 'cc-en_UK-robstoll'
        _ 'cc-infix-en_UK-robstoll'
        kotlinJvmJsAndAndroidIfCi(delegate, 'cc-en_GB-robstoll')
    }
    folder('apis', 'api-') {
        _ 'cc-en_UK'
        _ 'cc-infix-en_UK'
        kotlinJvmJsAndAndroidIfCi(delegate, 'cc-en_GB')
    }
    domain('domain-') {
        _ 'api-deprecated'
    }
    core('core-') {
        _ 'api-deprecated'
        _ 'robstoll-deprecated'
    }
    translations('translations-') {
        _ 'de_CH-deprecated'
        _ 'en_UK-deprecated'
    }
    misc {
        _ 'assertions'
    }
}
